-- Create a ScreenGui for the Loading Bar
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "LoadingGui"
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create the loading rectangle frame
local loadingFrame = Instance.new("Frame")
loadingFrame.Size = UDim2.new(0.6, 0, 0.45, 0) -- Size of the rectangle
loadingFrame.Position = UDim2.new(0.2, 0, 0.3, 0) -- Centered in the middle of the screen
loadingFrame.Parent = screenGui

-- Create a gradient for the loading frame (smooth grey to lighter black gradient with more area covered by grey and blended shades)
local loadingGradient = Instance.new("UIGradient")
loadingGradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 100, 100)), -- Lighter grey
    ColorSequenceKeypoint.new(1, Color3.fromRGB(30, 30, 30)) -- Lighter black for smooth blending
}
loadingGradient.Parent = loadingFrame

-- Add rounded corners to the loading frame
local loadingFrameCorner = Instance.new("UICorner")
loadingFrameCorner.CornerRadius = UDim.new(0.04, 0) -- Slightly rounded corners
loadingFrameCorner.Parent = loadingFrame

-- Create a title for the loading screen
local titleText = Instance.new("TextLabel")
titleText.Size = UDim2.new(1, 0, 0.2, 0) -- Size of the title
titleText.Position = UDim2.new(0, 0, 0.05, 0) -- Moved down
titleText.BackgroundTransparency = 1 -- Transparent background
titleText.Text = "Welcome to KynX"
titleText.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
titleText.Font = Enum.Font.SourceSansBold -- Bold font
titleText.TextScaled = true -- Scale text
titleText.Parent = loadingFrame

-- Create the loading bar (dark grey/light black)
local loadingBar = Instance.new("Frame")
loadingBar.Size = UDim2.new(0.8, 0, 0.15, 0) -- Size of the loading bar
loadingBar.Position = UDim2.new(0.1, 0, 0.55, 0) -- Moved down
loadingBar.BackgroundColor3 = Color3.fromRGB(70, 70, 70) -- Grey color for loading bar
loadingBar.Parent = loadingFrame

-- Add fully rounded corners to the loading bar
local loadingBarCorner = Instance.new("UICorner")
loadingBarCorner.CornerRadius = UDim.new(0.5, 0) -- Fully rounded corners for all sides
loadingBarCorner.Parent = loadingBar

-- Create a percentage text label for the loading bar
local percentageText = Instance.new("TextLabel")
percentageText.Size = UDim2.new(1, 0, 0.15, 0) -- Fill the width of the loading bar
percentageText.Position = UDim2.new(0, 0, 0.33, 0) -- Positioned between title and loading bar
percentageText.BackgroundTransparency = 1 -- Transparent background
percentageText.Text = "0%"
percentageText.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
percentageText.Font = Enum.Font.SourceSansBold -- Bold font
percentageText.TextScaled = true -- Scale text
percentageText.Parent = loadingFrame

-- Create the animated loading indicator (dark grey for the animation)
local animatedBar = Instance.new("Frame")
animatedBar.Size = UDim2.new(0, 0, 1, 0) -- Start at 0 width
animatedBar.Position = UDim2.new(0, 0, 0, 0) -- Align to the left
animatedBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey for animation
animatedBar.Parent = loadingBar

-- Add fully rounded corners to the animated loading bar
local animatedBarCorner = Instance.new("UICorner")
animatedBarCorner.CornerRadius = UDim.new(0.5, 0) -- Fully rounded corners for the animated bar
animatedBarCorner.Parent = animatedBar

-- Create status text labels
local statusText = Instance.new("TextLabel")
statusText.Size = UDim2.new(1, 0, 0.11, 0) -- Size of the status text
statusText.Position = UDim2.new(0, 0, 0.8, 0) -- Positioned below the title
statusText.BackgroundTransparency = 1 -- Transparent background
statusText.Text = "Checking user preferences..."
statusText.TextColor3 = Color3.fromRGB(255, 255, 255) -- White text
statusText.Font = Enum.Font.SourceSans -- Regular font
statusText.TextScaled = true -- Scale text
statusText.Parent = loadingFrame

-- Status messages
local statusMessages = {
    "Checking user preferences...",
    "Establishing connections...",
    "Finalizing layout...",
    "Applying themes...",
    "Script Loaded!" -- New message at the end
}

-- Function to update status texts periodically
local function updateStatusTexts()
    for _, text in ipairs(statusMessages) do
        wait(1.5) -- Wait for 1.5 seconds before updating the status text
        statusText.Text = text -- Update to the next status text
    end
end

-- Start updating the status texts in a separate thread
coroutine.wrap(updateStatusTexts)()

-- Start the loading bar and percentage animation immediately
for i = 1, 100 do
    percentageText.Text = i .. "%" -- Update percentage text

    -- Animate the loading bar
    animatedBar.Size = UDim2.new(i / 100, 0, 1, 0) -- Fill the bar
    wait(0.07) -- Simulate loading
end

-- Hide the loading screen after loading is complete
screenGui.Enabled = false

-- Unparent the loading GUI to clean up
screenGui:Destroy()

-- Load the Fluent library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "SurgeX", -- Window name
    SubTitle = "Kyi", -- Subtitle
    TabWidth = 165,
    Size = UDim2.fromOffset(580, 360), -- Size
    Acrylic = true,
    Theme = "Darker", -- Theme set to Darker
    MinimizeKey = Enum.KeyCode.LeftControl 
})

local Tabs = {
    Combat = Window:AddTab({ Title = "Combat", Icon = "swords" }),
    Autofarm = Window:AddTab({ Title = "Autofarm", Icon = "axe" }), -- Autofarm tab with axe icon
    Misc = Window:AddTab({ Title = "Misc", Icon = "wrench" }), -- Changed Misc tab icon to wrench
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" }),
    LocalPlayer = Window:AddTab({ Title = "Local Player", Icon = "user" }), -- Local Player tab with user icon
    Notifications = Window:AddTab({ Title = "Notifications", Icon = "bell-ring" }) -- Added Notifications tab with webhook icon
}

-- Killaura Section paragraph
Tabs.Combat:AddParagraph({
    Title = "Killaura Section",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local KillauraToggle = Tabs.Combat:AddToggle("Killaura", { Title = "Killaura", Default = false }) -- Killaura toggle
local HighlightTargetToggle = Tabs.Combat:AddToggle("HighlightTarget", { Title = "*Highlight Target*", Default = false }) -- Highlight Target toggle
local OrbitTargetToggle = Tabs.Combat:AddToggle("OrbitTarget", { Title = "*Orbit Target*", Default = false }) -- Orbit Target toggle

-- Titan Aura Section paragraph
Tabs.Combat:AddParagraph({
    Title = "Titan Aura Section",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local TitanAuraToggle = Tabs.Combat:AddToggle("TitanAura", { Title = "Titan Aura", Default = false }) -- Titan Aura toggle
local HighlightTitanToggle = Tabs.Combat:AddToggle("HighlightTitan", { Title = "*Highlight Titan*", Default = false }) -- Highlight Titan toggle
local OrbitTitanToggle = Tabs.Combat:AddToggle("OrbitTitan", { Title = "*Orbit Titan*", Default = false }) -- Orbit Titan toggle

-- Autofarm Section
Tabs.Autofarm:AddParagraph({
    Title = "Auto Eat", -- Title for Auto Eat
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local AutoEatToggle = Tabs.Autofarm:AddToggle("AutoEat", { Title = "Auto Eat", Default = false }) -- Auto Eat toggle
local FoodDropdown = Tabs.Autofarm:AddDropdown("SelectFood", {
    Title = "Select Food",
    Values = {"Cabbage", "Carrot", "Berries"}, -- Food options
    Multi = false,
    Default = 1,
})
local StartHungerSlider = Tabs.Autofarm:AddSlider("StartHunger", {
    Title = "Start Hunger", -- Title for Start Hunger
    Description = "Set your starting hunger.",
    Default = 100,
    Min = 100,
    Max = 1199,
    Rounding = 1,
})

-- Local Player Tab
Tabs.LocalPlayer:AddParagraph({
    Title = "Utility Features",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local InfiniteStaminaToggle = Tabs.LocalPlayer:AddToggle("InfiniteStamina", { Title = "Infinite Stamina", Default = false }) -- Infinite Stamina toggle
local NoFallDamageToggle = Tabs.LocalPlayer:AddToggle("NoFallDamage", { Title = "No Fall Damage", Default = false }) -- No Fall Damage toggle

-- New paragraph for Player Features
Tabs.LocalPlayer:AddParagraph({
    Title = "Player Features",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local NoclipToggle = Tabs.LocalPlayer:AddToggle("Noclip", { Title = "Noclip", Default = false }) -- Noclip toggle
local SpeedBypassToggle = Tabs.LocalPlayer:AddToggle("SpeedBypass", { Title = "Speed Bypass", Default = false }) -- Speed Bypass toggle
local JumpPowerToggle = Tabs.LocalPlayer:AddToggle("JumpPower", { Title = "Jump Power", Default = false }) -- Jump Power toggle

-- LocalScript to enable infinite stamina and disable fall damage
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to enable infinite stamina
local function enableInfiniteStamina()
    local lplr = LocalPlayer
    lplr:SetAttribute("stamina", 1)

    lplr:GetAttributeChangedSignal("stamina"):Connect(function()
        if lplr:GetAttribute("stamina") ~= 1 then
            lplr:SetAttribute("stamina", 1)
        end
    end)
end

-- Function to disable the fallDamage LocalScript
local function disableFallDamage()
    if LocalPlayer and LocalPlayer.Character then
        for _, desc in ipairs(LocalPlayer.Character:GetDescendants()) do
            if desc:IsA("LocalScript") and desc.Name == "fallDamage" then
                desc.Disabled = true
                print("fallDamage LocalScript has been disabled.")
                return
            end
        end
    end
end

-- Function to enable Noclip
local function enableNoclip()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    local noclip = true
    humanoid:GetPropertyChangedSignal("PlatformStand"):Connect(function()
        humanoid.PlatformStand = noclip
    end)
    
    while noclip do
        wait()
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end

-- Function to disable Noclip
local function disableNoclip()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
end

-- Function to enable Speed Bypass
local function enableSpeedBypass()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = 100 -- Set your desired speed here
end

-- Function to disable Speed Bypass
local function disableSpeedBypass()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = 16 -- Default speed
end

-- Function to enable Jump Power
local function enableJumpPower()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.JumpPower = 100 -- Set your desired jump power here
end

-- Function to disable Jump Power
local function disableJumpPower()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.JumpPower = 50 -- Default jump power
end

-- Toggle event for Infinite Stamina
InfiniteStaminaToggle:OnChanged(function()
    if InfiniteStaminaToggle.Value then
        enableInfiniteStamina()
    end
end)

-- Toggle event for No Fall Damage
NoFallDamageToggle:OnChanged(function()
    if NoFallDamageToggle.Value then
        disableFallDamage()
    end
end)

-- Toggle event for Noclip
NoclipToggle:OnChanged(function()
    if NoclipToggle.Value then
        enableNoclip()
    else
        disableNoclip()
    end
end)

-- Toggle event for Speed Bypass
SpeedBypassToggle:OnChanged(function()
    if SpeedBypassToggle.Value then
        enableSpeedBypass()
    else
        disableSpeedBypass()
    end
end)

-- Toggle event for Jump Power
JumpPowerToggle:OnChanged(function()
    if JumpPowerToggle.Value then
        enableJumpPower()
    else
        disableJumpPower()
    end
end)

Window:SelectTab(1)

Fluent:Notify({
    Title = "SurgeX",
    Content = "The script has been loaded.",
    Duration = 8
})
