-- Load the Fluent library
local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()

local Window = Fluent:CreateWindow({
    Title = "SurgeX", -- Window name
    SubTitle = "Kyi", -- Subtitle
    TabWidth = 165,
    Size = UDim2.fromOffset(580, 360), -- Size
    Acrylic = true,
    Theme = "Amethyst", -- Theme set to Darker
    MinimizeKey = Enum.KeyCode.LeftControl 
})

local Tabs = {
    Combat = Window:AddTab({ Title = "Combat", Icon = "swords" }),
    Autofarm = Window:AddTab({ Title = "Autofarm", Icon = "axe" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "wrench" }),
    Visual = Window:AddTab({ Title = "Visual", Icon = "eye" }),
    LocalPlayer = Window:AddTab({ Title = "Local Player", Icon = "user" }),
    Notifications = Window:AddTab({ Title = "Notifications", Icon = "bell-ring" })
}

-- Killaura Section paragraph
Tabs.Combat:AddParagraph({
    Title = "Killaura Section",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local KillauraEnabled = false
local KillauraTask
local OrbitEnabled = false

local function killauraenable()
    KillauraEnabled = true
    KillauraTask = task.spawn(function()
        while KillauraEnabled do
            if OrbitEnabled then
                print("ATTACK AURA # KILLAURA")
            else
                print("KILLAURA toggle is on")
            end
            wait(2)
        end
    end)
end

local function killauradisable()
    KillauraEnabled = false
    if KillauraTask then
        task.cancel(KillauraTask)
        KillauraTask = nil
    end
end

local KillauraToggle = Tabs.Combat:AddToggle("Killaura", { Title = "Killaura", Default = false })
KillauraToggle:OnChanged(function()
    if KillauraToggle.Value then
        killauraenable()
    else
        killauradisable()
    end
end)

-- Attack Aura Toggle
local OrbitTargetToggle = Tabs.Combat:AddToggle("AttackAura", { Title = "Attack Aura", Default = false })
OrbitTargetToggle:OnChanged(function()
    OrbitEnabled = OrbitTargetToggle.Value
end)

-- Titan Aura Section paragraph
Tabs.Combat:AddParagraph({
    Title = "Titan Aura Section",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local TitanAuraEnabled = false
local TitanAuraTask
local OrbitTitanEnabled = false

local function titanauraenable()
    TitanAuraEnabled = true
    TitanAuraTask = task.spawn(function()
        while TitanAuraEnabled do
            if OrbitTitanEnabled then
                print("ATTACK AURA # TITAN AURA")
            else
                print("TITAN AURA toggle is on")
            end
            wait(2)
        end
    end)
end

local function titanauradisable()
    TitanAuraEnabled = false
    if TitanAuraTask then
        task.cancel(TitanAuraTask)
        TitanAuraTask = nil
    end
end

local TitanAuraToggle = Tabs.Combat:AddToggle("TitanAura", { Title = "Titan Aura", Default = false })
TitanAuraToggle:OnChanged(function()
    if TitanAuraToggle.Value then
        titanauraenable()
    else
        titanauradisable()
    end
end)

-- Attack Aura Toggle
local OrbitTitanToggle = Tabs.Combat:AddToggle("AttackAuraTitan", { Title = "Attack Aura", Default = false })
OrbitTitanToggle:OnChanged(function()
    OrbitTitanEnabled = OrbitTitanToggle.Value
end)

-- Autofarm Section
Tabs.Autofarm:AddParagraph({
    Title = "Auto Eat",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local AutoEatToggle = Tabs.Autofarm:AddToggle("AutoEat", { Title = "Auto Eat", Default = false })
local FoodDropdown = Tabs.Autofarm:AddDropdown("SelectFood", {
    Title = "Select Food",
    Values = {"Cabbage", "Carrot", "Berries"},
    Multi = false,
    Default = 1,
})
local StartHungerSlider = Tabs.Autofarm:AddSlider("StartHunger", {
    Title = "Start Hunger",
    Description = "Set your starting hunger.",
    Default = 100,
    Min = 100,
    Max = 1199,
    Rounding = 1,
})

-- Local Player Tab
Tabs.LocalPlayer:AddParagraph({
    Title = "Utility Features",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local InfiniteStaminaToggle = Tabs.LocalPlayer:AddToggle("InfiniteStamina", { Title = "Infinite Stamina", Default = false })
local NoFallDamageToggle = Tabs.LocalPlayer:AddToggle("NoFallDamage", { Title = "No Fall Damage", Default = false })

-- New paragraph for Player Features
Tabs.LocalPlayer:AddParagraph({
    Title = "Player Features",
    Content = "⊹˚₊‧──────────────────────‧₊˚⊹"
})

local NoclipToggle = Tabs.LocalPlayer:AddToggle("Noclip", { Title = "Noclip", Default = false }) -- Noclip toggle
local SpeedBypassToggle = Tabs.LocalPlayer:AddToggle("SpeedBypass", { Title = "Speed Bypass", Default = false }) -- Speed Bypass toggle
local JumpPowerToggle = Tabs.LocalPlayer:AddToggle("JumpPower", { Title = "Jump Power", Default = false }) -- Jump Power toggle

-- LocalScript to enable infinite stamina and disable fall damage
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- TP Walking variables
local tpwalking = false
local hb = RunService.Heartbeat

-- Function to enable infinite stamina
local function enableInfiniteStamina()
    local lplr = LocalPlayer
    lplr:SetAttribute("stamina", 1)

    lplr:GetAttributeChangedSignal("stamina"):Connect(function()
        if lplr:GetAttribute("stamina") ~= 1 then
            lplr:SetAttribute("stamina", 1)
        end
    end)
end

-- Function to disable the fallDamage LocalScript
local function disableFallDamage()
    if LocalPlayer and LocalPlayer.Character then
        for _, desc in ipairs(LocalPlayer.Character:GetDescendants()) do
            if desc:IsA("LocalScript") and desc.Name == "fallDamage" then
                desc.Disabled = true
                return
            end
        end
    end
end

-- Function to enable Noclip
local function enableNoclip()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    local noclip = true
    humanoid:GetPropertyChangedSignal("PlatformStand"):Connect(function()
        humanoid.PlatformStand = noclip
    end)
    
    while noclip do
        wait()
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = false
            end
        end
    end
end

-- Function to disable Noclip
local function disableNoclip()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
        end
    end
end

-- Function to enable TP Walk
local function enableTPWalk(speed)
    tpwalking = true
    local chr = LocalPlayer.Character
    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")

    while tpwalking and chr and hum and hum.Parent do
        local delta = hb:Wait()
        if hum.MoveDirection.Magnitude > 0 then
            chr:TranslateBy(hum.MoveDirection * speed * delta * 6) -- Use 6 for TPWalk speed
        end
    end
end

-- Function to disable TP Walk
local function disableTPWalk()
    tpwalking = false
end

-- Function to enable Speed Bypass
local function enableSpeedBypass()
    enableTPWalk(6) -- Call TP Walk with speed 6
end

-- Function to disable Speed Bypass
local function disableSpeedBypass()
    disableTPWalk() -- Disable TP Walk
end

-- Function to enable Jump Power
local function enableJumpPower()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    humanoid.JumpPower = 75 -- Set to reduced Jump Power
end

-- Function to disable Jump Power
local function disableJumpPower()
    local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    
    humanoid.JumpPower = 50 -- Default JumpPower
end

-- Toggle event connections
InfiniteStaminaToggle:OnChanged(function()
    if InfiniteStaminaToggle.Value then
        enableInfiniteStamina()
    end
end)

NoFallDamageToggle:OnChanged(function()
    if NoFallDamageToggle.Value then
        disableFallDamage()
    end
end)

NoclipToggle:OnChanged(function()
    if NoclipToggle.Value then
        enableNoclip()
        enableSpeedBypass() -- Enable Speed Bypass when Noclip is enabled
        enableJumpPower() -- Enable Jump Power when Noclip is enabled
    else
        disableNoclip()
        disableSpeedBypass() -- Disable Speed Bypass when Noclip is disabled
        disableJumpPower() -- Disable Jump Power when Noclip is disabled
    end
end)

SpeedBypassToggle:OnChanged(function()
    if SpeedBypassToggle.Value then
        enableSpeedBypass() -- Enable Speed Bypass
    else
        disableSpeedBypass() -- Disable Speed Bypass
    end
end)

JumpPowerToggle:OnChanged(function()
    if JumpPowerToggle.Value then
        enableJumpPower()
    else
        disableJumpPower()
    end
end)

Window.OnClosed:Connect(function()
    -- Save any necessary settings before closing
end)
